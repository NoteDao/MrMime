import * as React from 'react';
import * as THREE from 'three';
import { DecalGeometry } from 'three-stdlib';

function setProp(value, targetProp) {
  if (Array.isArray(value)) {
    if (targetProp.fromArray) targetProp.fromArray(value);else targetProp.set(...value);
  } else {
    targetProp.copy(value);
  }
}

function Decal({
  debug,
  mesh,
  children,
  position,
  rotation,
  scale
}) {
  const ref = React.useRef(null);
  const [[p, r, s]] = React.useState(() => {
    return [new THREE.Vector3(), new THREE.Euler(), new THREE.Vector3(1, 1, 1)];
  });
  React.useLayoutEffect(() => {
    const parent = (mesh == null ? void 0 : mesh.current) || ref.current.parent;

    if (!(parent instanceof THREE.Mesh)) {
      throw new Error('Decal must have a Mesh as parent or specify its "mesh" prop');
    }

    if (parent) {
      setProp(position, p);
      setProp(rotation, r);
      setProp(scale, s);
      ref.current.geometry = new DecalGeometry(parent, p, r, s);
    }
  }, [mesh, position, scale, rotation, p, r, s]);
  return /*#__PURE__*/React.createElement("mesh", {
    ref: ref
  }, children || /*#__PURE__*/React.createElement("meshNormalMaterial", {
    transparent: true,
    depthTest: true,
    depthWrite: false,
    polygonOffset: true,
    polygonOffsetFactor: -4
  }), debug && /*#__PURE__*/React.createElement("mesh", {
    position: position,
    rotation: rotation,
    scale: scale
  }, /*#__PURE__*/React.createElement("boxGeometry", null), /*#__PURE__*/React.createElement("meshNormalMaterial", {
    wireframe: true
  }), /*#__PURE__*/React.createElement("axesHelper", null)));
}

export { Decal };
